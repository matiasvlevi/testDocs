{"project":{"name":"Dannjs","description":"Deep Neural Network Library for JavaScript.","version":"2.3.13","url":"https://dannjs.org"},"files":{"src\\classes\\add\\methods\\activation.js":{"name":"src\\classes\\add\\methods\\activation.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\add\\methods\\loss.js":{"name":"src\\classes\\add\\methods\\loss.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\add\\constructor.js":{"name":"src\\classes\\add\\constructor.js","modules":{},"classes":{"Add":1},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Create\\addHiddenLayer.js":{"name":"src\\classes\\dann\\methods\\Create\\addHiddenLayer.js","modules":{"Create":1},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Create\\makeWeights.js":{"name":"src\\classes\\dann\\methods\\Create\\makeWeights.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Create\\outputActivation.js":{"name":"src\\classes\\dann\\methods\\Create\\outputActivation.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Create\\setLossFunction.js":{"name":"src\\classes\\dann\\methods\\Create\\setLossFunction.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Interact\\feedForward.js":{"name":"src\\classes\\dann\\methods\\Interact\\feedForward.js","modules":{"Interact":1},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Interact\\log.js":{"name":"src\\classes\\dann\\methods\\Interact\\log.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Share\\createFromJSON.js":{"name":"src\\classes\\dann\\methods\\Share\\createFromJSON.js","modules":{"Share":1},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Share\\fromJSON.js":{"name":"src\\classes\\dann\\methods\\Share\\fromJSON.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Share\\toFunction.js":{"name":"src\\classes\\dann\\methods\\Share\\toFunction.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Share\\toJSON.js":{"name":"src\\classes\\dann\\methods\\Share\\toJSON.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Train\\backpropagate.js":{"name":"src\\classes\\dann\\methods\\Train\\backpropagate.js","modules":{"Train":1},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Train\\mapWeights.js":{"name":"src\\classes\\dann\\methods\\Train\\mapWeights.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Train\\mutateAdd.js":{"name":"src\\classes\\dann\\methods\\Train\\mutateAdd.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\methods\\Train\\mutateRandom.js":{"name":"src\\classes\\dann\\methods\\Train\\mutateRandom.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\dann\\constructor.js":{"name":"src\\classes\\dann\\constructor.js","modules":{},"classes":{"Dann":1},"fors":{},"namespaces":{}},"src\\classes\\layer\\methods\\feed.js":{"name":"src\\classes\\layer\\methods\\feed.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\layer\\methods\\log.js":{"name":"src\\classes\\layer\\methods\\log.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\layer\\constructor.js":{"name":"src\\classes\\layer\\constructor.js","modules":{},"classes":{"Layer":1},"fors":{"Layer":1},"namespaces":{}},"src\\classes\\matrix\\methods\\add.js":{"name":"src\\classes\\matrix\\methods\\add.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\fillCol.js":{"name":"src\\classes\\matrix\\methods\\fillCol.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\fillRow.js":{"name":"src\\classes\\matrix\\methods\\fillRow.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\fromArray.js":{"name":"src\\classes\\matrix\\methods\\fromArray.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\initiate.js":{"name":"src\\classes\\matrix\\methods\\initiate.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\insert.js":{"name":"src\\classes\\matrix\\methods\\insert.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\log.js":{"name":"src\\classes\\matrix\\methods\\log.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\make.js":{"name":"src\\classes\\matrix\\methods\\make.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\map.js":{"name":"src\\classes\\matrix\\methods\\map.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\mult.js":{"name":"src\\classes\\matrix\\methods\\mult.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\randomize.js":{"name":"src\\classes\\matrix\\methods\\randomize.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\set.js":{"name":"src\\classes\\matrix\\methods\\set.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\sub.js":{"name":"src\\classes\\matrix\\methods\\sub.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\toArray.js":{"name":"src\\classes\\matrix\\methods\\toArray.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\methods\\transpose.js":{"name":"src\\classes\\matrix\\methods\\transpose.js","modules":{},"classes":{},"fors":{},"namespaces":{}},"src\\classes\\matrix\\constructor.js":{"name":"src\\classes\\matrix\\constructor.js","modules":{},"classes":{"Matrix":1},"fors":{"Matrix":1},"namespaces":{}},"src\\core\\functions\\poolfuncs.js":{"name":"src\\core\\functions\\poolfuncs.js","modules":{},"classes":{},"fors":{},"namespaces":{}}},"modules":{"Dann":{"name":"Dann","submodules":{"Create":1,"Interact":1,"Share":1,"Train":1},"elements":{},"classes":{"Add":1,"Dann":1,"Layer":1,"Matrix":1},"fors":{"Layer":1,"Matrix":1},"namespaces":{},"file":"src\\classes\\matrix\\constructor.js","line":1},"Create":{"name":"Create","submodules":{},"elements":{},"classes":{"Dann":1},"fors":{},"is_submodule":1,"namespaces":{},"module":"Dann","namespace":"","file":"src\\classes\\dann\\constructor.js","line":5,"description":"Deep Neural Network object. Can be trained with data or by neuro-evolution."},"Interact":{"name":"Interact","submodules":{},"elements":{},"classes":{},"fors":{},"is_submodule":1,"namespaces":{},"module":"Dann","namespace":"","file":"src\\classes\\dann\\methods\\Interact\\feedForward.js","line":1},"Share":{"name":"Share","submodules":{},"elements":{},"classes":{},"fors":{},"is_submodule":1,"namespaces":{},"module":"Dann","namespace":"","file":"src\\classes\\dann\\methods\\Share\\createFromJSON.js","line":1},"Train":{"name":"Train","submodules":{},"elements":{},"classes":{},"fors":{},"is_submodule":1,"namespaces":{},"module":"Dann","namespace":"","file":"src\\classes\\dann\\methods\\Train\\backpropagate.js","line":1}},"classes":{"Add":{"name":"Add","shortname":"Add","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Dann","file":"src\\classes\\add\\constructor.js","line":1,"description":"Add a new custom function to Dannjs."},"Dann":{"name":"Dann","shortname":"Dann","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Dann","submodule":"Create","namespace":"","file":"src\\classes\\dann\\constructor.js","line":5,"description":"Deep Neural Network object. Can be trained with data or by neuro-evolution.","is_constructor":1,"params":[{"name":"input","description":"the number of input neurons.","type":"Number","optional":true},{"name":"output","description":"the number of output neurons.","type":"Number","optional":true}],"example":["<code>\nconst Dannjs = require('dannjs');\nconst Dann = Dannjs.dann;\n</code>\n<code>\n// 784 input, 2 output model\nconst nn = new Dann(784, 2);\nnn.log();\n</code>"]},"Layer":{"name":"Layer","shortname":"Layer","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Dann","namespace":"","file":"src\\classes\\layer\\constructor.js","line":1,"description":"A way to describe downsampling layers.","is_constructor":1,"params":[{"name":"type","description":"A string representing the type of this layer.","type":"String"},{"name":"Size","description":"The size of the downsampling layer.","type":"Number"},{"name":"Sample","description":"The size of the 2d sample iterating trough the array.","type":"Number"},{"name":"Stride","description":"The number of jumps the sample is going to perform for each iteration.","type":"Number"}],"example":["<code>\nconst Dannjs = require('dannjs');\nconst Layer = Dannjs.layer;\n</code>\n<code>\nconst l1 = new Layer('avgpool', 16, 2, 2);\nl1.log();\n</code>"]},"Matrix":{"name":"Matrix","shortname":"Matrix","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Dann","namespace":"","file":"src\\classes\\matrix\\constructor.js","line":1,"description":"A way to describe matrices and perform operations with them.","is_constructor":1,"params":[{"name":"rows","description":"the number of rows.","type":"Number"},{"name":"cols","description":"the number of columns.","type":"Number"}],"example":["<code>\nconst Dannjs = require('dannjs');\nconst Matrix = Dannjs.matrix;\n</code>\n<code>\nconst m = new Matrix(3,4);\nm.log();\n</code>"]}},"elements":{},"classitems":[{"file":"src\\classes\\add\\methods\\activation.js","line":1,"description":"Add a custom activation function.","itemtype":"method","name":"activation","params":[{"name":"name","description":"the name of the new activation function.","type":"String"},{"name":"activation","description":"the activation function.","type":"Function"},{"name":"derivative","description":"the derivative of this activation function.","type":"Function"}],"example":["<code>\nAdd.activation('myfunc',\n  (x) => {\n    if (x <= 0) {\n      return 0;\n    } else {\n      return 1;\n    }\n  },\n  (x) => {\n    return 0;\n  }\n);\nlet nn = new Dann();\nnn.outputActivation('myfunc');\nnn.log();\n</code>"],"class":"Add"},{"file":"src\\classes\\add\\methods\\loss.js","line":1,"description":"Add a custom loss function.","itemtype":"method","name":"loss","params":[{"name":"name","description":"the name of the new loss function.","type":"String"},{"name":"loss","description":"the loss function.","type":"Function"}],"example":["<code>\nAdd.loss('myfunc',\n  (predictions, target) => {\n    let sum = 0;\n    let ans = 0;\n    let n = target.length;\n    for (let i = 0; i < n; i++) {\n      let y = target[i];\n      let yHat = predictions[i];\n      sum += abs(y - yHat);\n    }\n    ans = sum / n;\n    return ans;\n  }\n);\nlet nn = new Dann();\nnn.setLossFunction('myfunc');\nnn.log();\n</code>"],"class":"Add"},{"file":"src\\classes\\dann\\methods\\Create\\addHiddenLayer.js","line":5,"description":"Add a Hidden Neuron Layer to a Dann neural network.","itemtype":"method","name":"addHiddenLayer","params":[{"name":"size","description":"Layer size, the number of neurons in the layer.","type":"Number"},{"name":"act","description":"Takes a string of the activation function's name. If left empty, the activation function will be set to 'sigmoid' by default. See available activation functions below.\n<table>\n<thead>\n  <tr>\n    <th>Name</th>\n    <th>Desmos</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>Sigmoid</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/so8eiigug4\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>leakyReLU</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/pxqqqxd3tz\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>reLU</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/jdb8dfof6x\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>siLU</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/f4nhtck5dr\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>tanH</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/eai4bialus\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>binary</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/zq8s1ixyp8\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>softsign</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/vmuhohc3da\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>sinc</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/6u4ioz8lhs\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>softplus</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/aegpfcyniu\">See graph</a></td>\n  </tr>\n</tbody>\n</table>\n<a href=\"./Add.html#method_activation\"><p>See how to add more </p></a>","type":"String","optional":true}],"example":["<code>\nconst nn = new Dann(10, 2);\n//Add a layer\nnn.addHiddenLayer(8, 'sigmoid');\n//console log\nconsole.log('Added first hidden layer: ');\nnn.log({struct:true});\n//Add a layer\nnn.addHiddenLayer(4, 'tanH');\n//console log\nconsole.log('Added a second hidden layer: ');\nnn.log({struct:true});\n</code>"],"class":"Dann","module":"Dann","submodule":"Create"},{"file":"src\\classes\\dann\\methods\\Create\\makeWeights.js","line":5,"description":"Creates the weights. This function should be called after all the hidden layers were added. The optional parameters determine the range in which starting weights are going to be set randomly. If no arguments are specified, weights are going to be set in between -1 and 1.","itemtype":"method","name":"makeWeights","params":[{"name":"arg1","description":"The minimum range value.","type":"Number","optional":true},{"name":"arg2","description":"The maximum range value.","type":"Number","optional":true}],"example":["<code>\nconst nn = new Dann(2, 2);\n// initiate the Weights\nnn.makeWeights();\n// log weights\nnn.log({weights:true, table:true});\n// add a layer & re-initiate weights in a range of (-0.1, 0.1)\nnn.addHiddenLayer(4, 'sigmoid');\nnn.makeWeights(-0.1, 0.1);\n// log weights\nconsole.log('New re-initiated weights:');\nnn.log({weights:true, table:true});\n</code>"],"class":"Dann","module":"Dann","submodule":"Create"},{"file":"src\\classes\\dann\\methods\\Create\\outputActivation.js","line":5,"description":"Sets the activation function of the output.","itemtype":"method","name":"outputActivation","params":[{"name":"act","description":"Takes a string of the activation function's name. If this function is not called, the activation function will be set to 'sigmoid' by default. See available activation functions <a target=\"_blank\" href=\"https://dannjs.org\">here</a>.\n<table>\n<thead>\n  <tr>\n    <th>Name</th>\n    <th>Desmos</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>Sigmoid</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/so8eiigug4\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>leakyReLU</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/pxqqqxd3tz\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>reLU</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/jdb8dfof6x\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>siLU</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/f4nhtck5dr\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>tanH</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/eai4bialus\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>binary</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/zq8s1ixyp8\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>softsign</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/vmuhohc3da\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>sinc</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/6u4ioz8lhs\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>softplus</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/aegpfcyniu\">See graph</a></td>\n  </tr>\n</tbody>\n</table>\n<a href=\"./Add.html#method_activation\"><p>See how to add more </p></a>","type":"String"}],"example":["<code>\nconst nn = new Dann(4, 2);\nnn.addHiddenLayer(8, 'sigmoid');\nnn.makeWeights();\nconsole.log('Before changing the output activation');\nnn.log({struct:true});\nnn.outputActivation('tanH');\nconsole.log('After changing the output activation');\nnn.log({struct:true});\n</code>"],"class":"Dann","module":"Dann","submodule":"Create"},{"file":"src\\classes\\dann\\methods\\Create\\setLossFunction.js","line":5,"description":"Set the loss function of a Dann model","itemtype":"method","name":"setLossFunction","params":[{"name":"name","description":"Takes a string of the loss function's name. If this function is not called, the loss function will be set to 'mse' by default. See available loss functions <a target=\"_blank\" href=\"dannjs.org\">Here</a>.","type":"String"},{"name":"percentile","description":"Some loss functions like the Quantile loss will need a percentile value. Ranges between 0 and 1.\n<table>\n<thead>\n  <tr>\n    <th>Name</th>\n    <th>Desmos</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>mse</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/msg3bebyhe\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>mae</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/sqyudacjzb\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>lcl</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/ropuc3y6sa\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>mbe</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/xzp1hr0vin\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>mael</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/dimqieesut\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>rmse</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/x7efwdfada\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>mce</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/bzlqe7bafx\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>bce</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/ri1bj9gw4l\">See graph</a></td>\n  </tr>\n  <tr>\n    <td>quantile</td>\n    <td><a target=\"_blank\" href=\"https://www.desmos.com/calculator/7rsvaivrat\">See graph</a></td>\n  </tr>\n</tbody>\n</table>\n<a href=\"./Add.html#method_loss\"><p>See how to add more </p></a>","type":"Number","optional":true}],"example":["<code>\nconst nn = new Dann(4, 2);\nnn.addHiddenLayer(8, 'sigmoid');\nnn.makeWeights();\n//Before changing the loss function\nconsole.log(nn.lossfunc);\nnn.setLossFunction('mael');\n//After changing the loss function\nconsole.log(nn.lossfunc);\n</code>","<code>\nconst nn = new Dann(4, 4);\nnn.addHiddenLayer(16, 'sigmoid');\nnn.makeWeights();\n//Before changing the loss function\nconsole.log(nn.lossfunc);\n// Quantile loss with 40 percentile\nnn.setLossFunction('quantile', 0.4);\n//After changing the loss function\nconsole.log(nn.lossfunc);\n</code>"],"class":"Dann","module":"Dann","submodule":"Create"},{"file":"src\\classes\\dann\\methods\\Interact\\feedForward.js","line":5,"description":"Feed data through the model to obtain an output or prediction.","itemtype":"method","name":"feedForward","params":[{"name":"inputs","description":"Array of input data.","type":"Array"},{"name":"options","description":"Object including specific properties.\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log</td>\n<td>Boolean</td>\n<td>If set to true, it will log a report in the console.</td>\n</tr>\n<tr>\n<td>table</td>\n<td>Boolean</td>\n<td>If the &#39;log&#39; option is set to true, setting this value to true will print the arrays of this function in tables.</td>\n</tr>\n<tr>\n<td>decimals</td>\n<td>Integer</td>\n<td>If used, the output of this function will be rounded to the number of decimals specified.</td>\n</tr>\n</tbody>\n</table>","type":"Object","optional":true}],"return":{"description":"Array of output predictions.","type":"Array"},"example":["<code>\nconst nn = new Dann(4, 2);\nnn.makeWeights();\nlet prediction = nn.feedForward([0,0,0,1], {log:true});\n//outputs an array of length 2\nconsole.log(prediction);\n</code>"],"class":"Dann","module":"Dann","submodule":"Interact"},{"file":"src\\classes\\dann\\methods\\Interact\\log.js","line":5,"description":"Displays information about the model in the console.","itemtype":"method","name":"log","params":[{"name":"options","description":"An object including specific properties.\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>details</td>\n<td>Boolean</td>\n<td>If set to true, the function will log more advanced details about the model.</td>\n</tr>\n<tr>\n<td>decimals</td>\n<td>integer</td>\n<td>The number of decimals the logged data is going to have. It is set to 3 by default.</td>\n</tr>\n<tr>\n<td>table</td>\n<td>Boolean</td>\n<td>Whether or not we want to print our matrices in the form of a table or Matrix object log.</td>\n</tr>\n<tr>\n<td>gradients</td>\n<td>Boolean</td>\n<td>If this is set to true, the the function will log the gradients of the model.</td>\n</tr>\n<tr>\n<td>biases</td>\n<td>Boolean</td>\n<td>If this is set to true, the the function will log the biases of the model.</td>\n</tr>\n<tr>\n<td>weights</td>\n<td>Boolean</td>\n<td>If this is set to true, the the function will log the weights of the model.</td>\n</tr>\n<tr>\n<td>struct</td>\n<td>Boolean</td>\n<td>If this is set to true, the the function will log the structure of the model.</td>\n</tr>\n<tr>\n<td>errors</td>\n<td>Boolean</td>\n<td>If this is set to true, the the function will log the errors of the model.</td>\n</tr>\n<tr>\n<td>misc</td>\n<td>Boolean</td>\n<td>If this is set to true, the the function will log the loss of the model, the learning rate of the model and the loss function.</td>\n</tr>\n</tbody>\n</table>","type":"Object","optional":true}],"example":["<code>\nconst nn = new Dann(24, 2);\nnn.log();\n</code>"],"class":"Dann","module":"Dann","submodule":"Interact"},{"file":"src\\classes\\dann\\methods\\Share\\createFromJSON.js","line":5,"description":"Creates a Dann model from a json object.","itemtype":"method","name":"createFromJSON","static":1,"params":[{"name":"data","description":"model data json object, you can get this object from a yourmodel.toJSON(); See docs <a href=\"https://dannjs.org\">here</a>.","type":"Object"}],"return":{"description":"A Dann model.","type":"Dann"},"example":["<code>\nconst nn = new Dann(24, 4);\nnn.addHiddenLayer(12, 'sigmoid');\nnn.makeWeights();\nconst modelData = nn.toJSON();\nconst newNN = Dann.createFromJSON(modelData);\nnewNN.log();\n</code>"],"class":"Dann","module":"Dann","submodule":"Share"},{"file":"src\\classes\\dann\\methods\\Share\\fromJSON.js","line":5,"description":"Applies a json object to a Dann model.","itemtype":"method","name":"fromJSON","params":[{"name":"data","description":"model data json object, you can get this object from a yourmodel.toJSON(); See docs <a href=\"https:/dannjs.org\">here</a>.","type":"Object"}],"return":{"description":"A Dann model.","type":"Dann"},"example":["<code>\nconst nn = new Dann(24,4);\nnn.addHiddenLayer(18,'tanH');\nnn.addHiddenLayer(12,'sigmoid');\nnn.makeWeights();\nconst modelData = nn.toJSON();\nconst newNN = new Dann();\nnewNN.fromJSON(modelData);\nnewNN.log();\n</code>"],"class":"Dann","module":"Dann","submodule":"Share"},{"file":"src\\classes\\dann\\methods\\Share\\toFunction.js","line":5,"description":"This method allows for a Dann model to be converted into a minified javascript function that can run independently, which means you don't need to import the library for it to work. The function generated acts as a Dann.feedForward().","itemtype":"method","name":"toFunction","params":[{"name":"name","description":"the name of the function, set to 'myDannFunction' by default.","type":"String","optional":true}],"return":{"description":"The function as a string.","type":"String"},"example":["<code>\nconst nn = new Dann(4, 4);\nnn.addHiddenLayer(8);\nnn.makeWeights();\nlet stringFunction = nn.toFunction();\n// Copy & paste the string function!\nconsole.log(stringFunction);\n</code>"],"class":"Dann","module":"Dann","submodule":"Share"},{"file":"src\\classes\\dann\\methods\\Share\\toJSON.js","line":5,"description":"Gets a dannData object.","itemtype":"method","name":"toJSON","return":{"description":"A dannData object.","type":"Object"},"example":["<code>\nconst nn = new Dann(24, 4);\nnn.addHiddenLayer(12, 'sigmoid');\nnn.makeWeights();\n// Getting json\nconst modelData = nn.toJSON();\nconst newNN = new Dann();\n// Setting\nnewNN.fromJSON(modelData);\nnewNN.log();\n</code>"],"class":"Dann","module":"Dann","submodule":"Share"},{"file":"src\\classes\\dann\\methods\\Train\\backpropagate.js","line":5,"description":"Backpropagate through a Dann model in order to train the weights.","itemtype":"method","name":"backpropagate","params":[{"name":"inputs","description":"Array of input data.","type":"Array"},{"name":"target","description":"Array of expected output.","type":"Array"},{"name":"options","description":"Object including specific properties.\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log</td>\n<td>Boolean</td>\n<td>If set to true, it will log a report in the console.</td>\n</tr>\n<tr>\n<td>table</td>\n<td>Boolean</td>\n<td>If the &#39;log&#39; option is set to true, setting this value to true will print the arrays of this function in tables.</td>\n</tr>\n<tr>\n<td>dropout</td>\n<td>Number</td>\n<td>A value ranging from 0 to 1 determining the chance of a neuron being idle during a backward pass.</td>\n</tr>\n</tbody>\n</table>","type":"Object","optional":true}],"example":["<code>\nconst nn = new Dann(2, 1);\nnn.addHiddenLayer(8);\nnn.makeWeights();\n// Train 1000 epoch\nfor (let i = 0; i < 1000; i++) {\n   nn.backpropagate([0,0],[0]);\n   nn.backpropagate([1,0],[1]);\n   nn.backpropagate([0,1],[1]);\n   nn.backpropagate([1,1],[0]);\n}\n</code>"],"class":"Dann","module":"Dann","submodule":"Train"},{"file":"src\\classes\\dann\\methods\\Train\\mapWeights.js","line":5,"description":"This method maps the weights of a Dann model. It is usefull for neuroevolution simulations where you would map the weights with an equation containing a random factor.","itemtype":"method","name":"mapWeights","params":[{"name":"f","description":"the function to map the weights with.","type":"Function"}],"example":["<code>\nconst nn = new Dann(2, 2);\nnn.makeWeights(-1, 1);\nnn.log({weights:true});\nnn.mapWeights((x)=>{\n  return (Math.random()*0.1)+x;\n});\nnn.log({weights:true})\n</code>"],"class":"Dann","module":"Dann","submodule":"Train"},{"file":"src\\classes\\dann\\methods\\Train\\mutateAdd.js","line":5,"description":"This function mutates the weights by taking a percentage of the weight & adding it to the weight. This is for Neuroevolution tasks.","itemtype":"method","name":"mutateAdd","params":[{"name":"randomFactor","description":"Percentage to add to each weight. Generally in 0 and 1.","type":"Number"}],"example":["<code>\nconst nn = new Dann(4, 2);\nnn.makeWeights();\nnn.log({weights:true, table:true})\n// weights add 5% of themselves.\nnn.mutateAdd(0.05);\nnn.log({weights:true,table:true});\n</code>"],"class":"Dann","module":"Dann","submodule":"Train"},{"file":"src\\classes\\dann\\methods\\Train\\mutateRandom.js","line":5,"description":"This function mutates each weights randomly. This is for Neuroevolution tasks.","itemtype":"method","name":"mutateRandom","params":[{"name":"range","description":"This will multiply with a random number from -range to range and add to each weight.","type":"Number"},{"name":"probability","description":"The probability of a weight being affected by a random mutation. Ranging from 0 to 1. Setting this value to 1 would mutate all the model's weights.","type":"Number","optional":true}],"example":["<code>\nconst nn = new Dann(4, 2);\nnn.makeWeights();\nnn.log({weights:true, table:true});\n// adding (weight*random(-0.1, 0.1)) to 50% of the weights.\nnn.mutateRandom(0.1, 0.5);\nnn.log({weights:true, table:true});\n</code>"],"class":"Dann","module":"Dann","submodule":"Train"},{"file":"src\\classes\\layer\\methods\\feed.js","line":1,"description":"Feed data through the layer to obtain an output.","itemtype":"method","name":"feed","params":[{"name":"data","description":"Takes an array of numbers to feed through the layer.","type":"Array"},{"name":"options","description":"An object including specific properties.\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Property</th>\n<th style=\"text-align:center\">Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">log</td>\n<td style=\"text-align:center\">Boolean</td>\n<td>Whether or not to log the output.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">Boolean</td>\n<td>Whether or not we want to print the result in the form of a table or a normal console log.</td>\n</tr>\n</tbody>\n</table>","type":"Object","optional":true}],"return":{"description":"Array of outputs values.","type":"Array"},"class":"Layer","module":"Dann"},{"file":"src\\classes\\layer\\methods\\log.js","line":1,"description":"Log the layer in the console.","itemtype":"method","name":"log","example":["<code>\nconst l1 = new Layer('maxpool', 16, 4, 4);\nl1.log();\n</code>"],"class":"Layer","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\add.js","line":1,"description":"Add a value or Matrix to a Matrix object.","itemtype":"method","name":"add","params":[{"name":"n","description":"Number value or Matrix to add to the Matrix object.","type":"Number | Matrix"}],"chainable":1,"example":["<code>\nconst m = new Matrix(3,3);\nm.set([\n   [1, 1, 1],\n   [5, 3, 2],\n   [2, 4, 4]\n]);\nm.add(1);\nm.log();\n//   [2, 2, 2]\n//   [6, 4, 3]\n//   [2, 4, 4]\n</code>","<code>\nconst a = new Matrix(3,3);\na.set([\n   [1, 1, 1],\n   [5, 3, 2],\n   [2, 4, 4]\n]);\nconst b = new Matrix(3,3);\nb.set([\n   [1, 4, 1],\n   [2, 2, 1],\n   [2, 1, 0]\n]);\na.add(b);\na.log();\n//   [2, 5, 2]\n//   [7, 7, 3]\n//   [4, 5, 4]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\add.js","line":65,"description":"Add two Matrix objects together.","itemtype":"method","name":"add","static":1,"params":[{"name":"a","description":"The first Matrix object in the operation.","type":"Matrix"},{"name":"b","description":"The second Matrix object in the operation.","type":"Matrix"}],"return":{"description":"the result Matrix.","type":"Matrix"},"example":["<code>\nconst a = new Matrix(3,3);\na.set([\n   [4, 2, 1],\n   [2, 3, 2],\n   [1, 1, 4]\n]);\nconst b = new Matrix(3,3);\nb.set([\n   [1, 4, 1],\n   [2, 2, 1],\n   [2, 1, 0]\n]);\nconst c = Matrix.add(a, b);\nc.log();\n//   [5, 6, 1]\n//   [4, 5, 3]\n//   [3, 2, 4]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\fillCol.js","line":1,"description":"Fill a culmn of a matrix with a value.","itemtype":"method","name":"fillCol","params":[{"name":"col","description":"The column to fill","type":"Number"},{"name":"num","description":"The value to fill the column with","type":"Number"}],"chainable":1,"example":["<code>\nlet m = new Matrix(3, 4);\n// Fill column 3 with values of 100\nm.fillCol(3, 100);\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\fillRow.js","line":1,"description":"Fill a specific row in a matrix.","itemtype":"method","name":"fillRow","params":[{"name":"row","description":"The row index to fill","type":"Number"},{"name":"num","description":"The value to fill the row with","type":"Number"}],"chainable":1,"example":["<code>\nlet m = new Matrix(3, 4);\n// Fill row 2 with values of 100\nm.fillRow(2, 100);\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\fromArray.js","line":1,"description":"Convert an Array into a Matrix Object","itemtype":"method","name":"fromArray","static":1,"params":[{"name":"array","description":"The array to convert into a Matrix.","type":"Array"}],"return":{"description":"1 row, n col Matrix Object","type":"Matrix"},"example":["<code>\nlet a = [1, 0, 1, 1];\nlet m = Matrix.fromArray(a);\nm.log();\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\initiate.js","line":1,"description":"Initiate a matrix with a certain value.","itemtype":"method","name":"initiate","params":[{"name":"value","description":"The value to initiate te Matrix with, set to 0 by default.","type":"Number","optional":true}],"chainable":1,"example":["<code>\nconst m = new Matrix(2, 2);\nm.initiate(100);\nm.log();\n// [100, 100]\n// [100, 100]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\insert.js","line":1,"description":"Set a specific value at a coordinate in the matrix.","itemtype":"method","name":"insert","params":[{"name":"value","description":"The value to be inserted into the specified coordinates in the matrix","type":"Number"},{"name":"x","description":"Row index","type":"Number"},{"name":"y","description":"Column index","type":"Number"}],"chainable":1,"example":["<code>\nconst m1 = new Matrix(3,4);\nm1.log();\n// [0, 0, 0, 0]\n// [0, 0, 0, 0]\n// [0, 0, 0, 0]\nlet value = 1;\nm1.insert(value, 2, 3);\nm1.log();\n// [0, 0, 0, 0]\n// [0, 0, 0, 0]\n// [0, 0, 0, 1]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\log.js","line":1,"description":"Logs information about the matrix.","itemtype":"method","name":"log","params":[{"name":"options","description":"Object including specific properties.","type":"Object","optional":true}],"example":["<code>\nconst m = new Matrix(3, 6);\n// log\nm.log();\n// log as a table\nm.log({table:true});\n// log with rounded values\nm.log({decimals:3});\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\make.js","line":1,"description":"Create a Number[][] matrix, all values set to 0.","itemtype":"method","name":"make","static":1,"params":[{"name":"x","description":"the x component of the Number[][] matrix.","type":"Number"},{"name":"y","description":"the y component of the Number[][] matrix.","type":"Number"}],"return":{"description":"","type":"Number[][]"},"example":["<code>\nlet rawMatrix = Matrix.make(3, 4);\nconsole.log(rawMatrix);\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\map.js","line":1,"description":"Map matrix values to a function","itemtype":"method","name":"map","params":[{"name":"f","description":"The function with which to map the matrix values.","type":"Function"}],"chainable":1,"example":["<code>\nconst m = new Matrix(2, 2);\nm.initiate(4);\nm.log();\n// [4, 4]\n// [4, 4]\nm.map(x => x*x);\nm.log();\n// [16, 16]\n// [16, 16]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\map.js","line":29,"description":"Map matrix values to a function","itemtype":"method","name":"map","static":1,"params":[{"name":"m","description":"The Matrix with which to apply the operation.","type":"Function"}],"return":{"description":"","type":"Matrix"},"example":["<code>\nconst m = new Matrix(2, 2);\nm.initiate(4);\nm.log();\n// [4, 4]\n// [4, 4]\nlet m1 = Matrix.map(m, x => x*x*x);\nm1.log();\n// [64, 64]\n// [64, 64]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\mult.js","line":1,"description":"Multiply a Matrix object by an other matrix or a scalar","itemtype":"method","name":"mult","params":[{"name":"n","description":"Scalar or Matrix to multiply to the Matrix object.","type":"Matrix|Number"}],"chainable":1,"example":["<code>\nconst m = new Matrix(2, 2);\nm.set([\n   [1, 2],\n   [2, 3]\n]);\nm.mult(2);\nm.log();\n//  [2, 4],\n//  [4, 6]\n</code>","<code>\nconst a = new Matrix(2, 2);\na.set([\n   [1, 2],\n   [2, 3]\n]);\nconst b = new Matrix(2, 2);\nb.set([\n   [2, 2],\n   [2, 0.5]\n]);\na.mult(b);\na.log();\n//  [2, 4],\n//  [4, 1.5]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\mult.js","line":62,"description":"Matrix Multiplication, also commonly refered as Matrix dot product. The rows of B must match the columns of A.","itemtype":"method","name":"mult","static":1,"params":[{"name":"a","description":"The first matrix in the operation.","type":"Matrix"},{"name":"b","description":"The second matrix in the operation.","type":"Matrix"},{"name":"options","description":"Optional parameters.","type":"Object","optional":true}],"return":{"description":"The resultant Matrix Object.","type":"Matrix"},"example":["<code>\nlet a = new Matrix(4, 3);\na.set([\n  [1, 0, 1, 0],\n  [0, 1, 0, 0],\n  [0, 1, 1, 1]\n]);\nlet b = new Matrix(3, 4);\nb.set([\n   [1, 0, 1],\n   [0, 1, 0],\n   [0, 1, 1],\n   [1, 0, 0]\n]);\nlet c = Matrix.mult(a,b);\nc.log();\n// c.matrix is\n// [1, 1, 2]\n// [0, 1, 0]\n// [1, 2, 1]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\randomize.js","line":1,"description":"Randomize a Matrix Object's values","itemtype":"method","name":"randomize","params":[{"name":"min","description":"the minimum possible random value.","type":"Number"},{"name":"max","description":"the maximum possible random value.","type":"Number"}],"chainable":1,"example":["<code>\nconst a = new Matrix(3,3);\na.randomize(-1, 1);\na.log();\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\set.js","line":1,"description":"Set a Matrix object.","itemtype":"method","name":"set","params":[{"name":"matrix","description":"A matrix with which to set the current Matrix object with.","type":"Number[][]"}],"example":["<code>\nconst a = new Matrix(0,0);\nconst rawMatrix = [\n   [1, 0],\n   [0, 1]\n];\na.set(rawMatrix);\na.log();\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\sub.js","line":1,"description":"Subtract a value or Matrix to a matrix object.","itemtype":"method","name":"sub","params":[{"name":"n","description":"Number to subtract to the matrix.","type":"Number | Matrix"}],"chainable":1,"example":["<code>\nconst m = new Matrix(3,3);\nm.set([\n   [1, 2, 1],\n   [2, 2, 3],\n   [2, 1, 4]\n]);\nm.sub(1);\nm.log();\n//   [0, 1, 0]\n//   [1, 1, 2]\n//   [1, 0, 3]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\sub.js","line":43,"description":"Subtract two Matrix objects together.","itemtype":"method","name":"sub","static":1,"params":[{"name":"a","description":"The first Matrix object in the operation.","type":"Matrix"},{"name":"b","description":"The second Matrix object in the operation.","type":"Matrix"}],"return":{"description":"the result Matrix.","type":"Matrix"},"example":["<code>\nconst a = new Matrix(3,3);\na.set([\n   [4, 2, 1],\n   [2, 3, 2],\n   [1, 1, 4]\n]);\nconst b = new Matrix(3,3);\nb.set([\n   [1, 4, 1],\n   [2, 2, 1],\n   [2, 1, 0]\n]);\nconst c = Matrix.sub(a, b);\nc.log();\n//   [3, -2, 0]\n//   [0,  1, 1]\n//   [-1, 0, 4]\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\toArray.js","line":1,"description":"Convert a (1 by n) or (n by 1) Matrix object to an array.","itemtype":"method","name":"toArray","return":{"description":"","type":"Array"},"example":["<code>\nlet m = new Matrix(4, 1);\nlet a = m.toArray();\nconsole.log(a);\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\toArray.js","line":31,"description":"Convert a (1 by n) or (n by 1) Matrix object to an array.","itemtype":"method","name":"toArray","static":1,"return":{"description":"","type":"Array"},"example":["<code>\nlet m = new Matrix(4, 1);\nlet a = Matrix.toArray(m);\nconsole.log(a);\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\classes\\matrix\\methods\\transpose.js","line":1,"description":"Transpose operation of a matrix. Invert row coordinates with column coordinates","itemtype":"method","name":"transpose","params":[{"name":"m","description":"The matrix to be transposed.","type":"Matrix"}],"return":{"description":"","type":"Matrix"},"example":["<code>\nconst m1 = new Matrix(2,4);\nm1.log({table:true});\nconst m2 = Matrix.transpose(m1);\nm2.log({table:true});\n</code>"],"class":"Matrix","module":"Dann"},{"file":"src\\core\\functions\\poolfuncs.js","line":1,"description":"Pool selection functions\nFor Layer class, these are not used in Dann.","class":"","module":"Dann"}],"warnings":[{"message":"Missing item type\nPool selection functions\nFor Layer class, these are not used in Dann.","line":" src\\core\\functions\\poolfuncs.js:1"}]}